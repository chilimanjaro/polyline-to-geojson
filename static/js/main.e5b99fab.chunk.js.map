{"version":3,"sources":["images/loading-animation.svg","components/ErrorNotification.js","components/DragArea.js","components/FileLoader.js","components/DataEditor.js","components/FileSummary.js","components/ReuploadFile.js","components/SectionOption.js","components/ColumnChooser.js","components/FileExport.js","components/Loading.js","App.js","index.js","components/worker/FileDataWorker.js"],"names":["module","exports","ErrorNotification","setTimeout","props","removeError","index","clearTimeout","className","this","message","onClick","Component","DragArea","id","dragProps","inDragArea","type","accept","onChange","e","handleFile","target","files","htmlFor","FileLoader","handleDragEnter","preventDefault","stopPropagation","dragDepth","dataTransfer","items","length","setState","handleDragLeave","handleDragOver","handleDrop","showError","clearData","file","undefined","handleIsFileLoading","reader","FileReader","fileDataWorker","worker","onload","parseFileData","result","then","handleFileUpload","catch","error","readAsText","errors","state","uuid","filter","onDragEnter","onDragLeave","onDragOver","onDrop","map","key","React","DataEditor","FileSummary","style","fontWeight","dataLength","columnsLength","ReuploadFile","reinitialize","SectionOption","show","title","name","value","columns","column","ColumnChooser","handleChangeSectionOption","parseInt","isNaN","handleChangeOptionValue","polylineColumnId","checked","includePathAnimation","startTimestampColumnId","endTimestampColumnId","FileExport","fileName","handleFileNameChange","generateGeoJSON","Loading","src","loadingAnimation","alt","initialState","data","isFileLoading","isFileUploaded","isGenerating","App","property","handleIsGenerating","generateFeatureCollection","saveData","console","log","object","json","JSON","stringify","blob","Blob","url","URL","createObjectURL","a","document","createElement","body","appendChild","href","download","click","window","revokeObjectURL","remove","ReactDOM","render","StrictMode","getElementById","addMethods","methods","w","Worker"],"mappings":"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","file":"static/js/main.e5b99fab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading-animation.80a2dbc6.svg\";","import React, { Component } from 'react'\n\nexport class ErrorNotification extends Component {\n    componentDidMount() {\n        setTimeout(() => this.props.removeError(this.props.index), 5000);\n    }\n\n    componentWillUnmount() {\n        clearTimeout();\n    }\n\n    render() {\n        return (\n            <div className=\"error\">{this.props.message} <div className=\"close\" onClick={() => this.props.removeError(this.props.index)}/></div>\n        )\n    }\n}\n\nexport default ErrorNotification\n","import React, { Component } from 'react'\n\nexport class DragArea extends Component {\n    render() {\n        return (\n            <div id=\"drop-area\" {...this.props.dragProps} className={this.props.inDragArea ? \"active\" : \"\"}>\n                <input id=\"file-chooser-input\" type=\"file\" accept=\".csv\" onChange={e => this.props.handleFile(e.target.files[0])} />\n                <label className=\"drag-area-button\" htmlFor=\"file-chooser-input\">\n                    Drag your file here or click here to choose it from the list.\n                </label>\n                <div id=\"drag-area-overlay\" className={this.props.inDragArea ? \"active\" : \"\"}>\n                    <div className=\"drag-area-overlay-text\">\n                        Drop your file here.\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default DragArea\n","import React from 'react'\nimport ErrorNotification from './ErrorNotification';\nimport { v4 as uuid } from 'uuid'\nimport DragArea from './DragArea';\nimport worker from 'workerize-loader!./worker/FileDataWorker' // eslint-disable-line import/no-webpack-loader-syntax\n\nclass FileLoader extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inDragArea: false,\n            errors: []\n        }\n    \n        this.dragDepth = 0;\n    \n        this.dragProps = {\n            onDragEnter: this.handleDragEnter,\n            onDragLeave: this.handleDragLeave,\n            onDragOver: this.handleDragOver,\n            onDrop: this.handleDrop\n        }\n    }\n\n    handleDragEnter = e => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.dragDepth++;\n        \n        if (e.dataTransfer.items && e.dataTransfer.items.length > 0) {\n            this.setState({inDragArea: true});\n        }\n    }\n\n    handleDragLeave = e => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.dragDepth--;\n        if(this.dragDepth > 0) return;\n        \n        this.setState({inDragArea: false});\n    }\n\n    handleDragOver = e => {\n        e.preventDefault();\n        e.stopPropagation();\n        \n    }\n\n    handleDrop = e => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.setState({inDragArea: false});\n        \n        if (e.dataTransfer.items && e.dataTransfer.items.length > 0) {\n            if(e.dataTransfer.items.length > 1)\n                this.showError(\"Dragged too many files.\")\n            else\n                this.handleFile(e.dataTransfer.files[0]);\n\n            e.dataTransfer.clearData();\n            this.dragDepth = 0;\n        }\n    }\n\n    handleFile = file => {\n        if(file !== null && file !== undefined) {\n            if(file.type !== \"text/csv\") return this.showError(\"Uploaded file is not a CSV file.\")\n\n            this.props.handleIsFileLoading(true);\n            var reader = new FileReader();\n            var fileDataWorker = worker();\n\n            reader.onload = e => {\n                fileDataWorker.parseFileData(e.target.result)\n                    .then(result => {\n                        this.props.handleFileUpload(result)\n                    })\n                    .catch(error => {\n                        this.showError(error.message);\n                        this.props.handleIsFileLoading(false);\n                    })\n            }\n\n            reader.readAsText(file);\n        }\n    }\n\n    showError = message => {\n        const errors = this.state.errors;\n        this.setState({ errors : [...errors, {\n            id: uuid(),\n            message\n        }] })\n    }\n\n    removeError = id => {\n        const errors = this.state.errors.filter(error => error.id !== id);\n        this.setState({ errors : [...errors] })\n    }\n\n    render() {\n        return (\n            <div id=\"file-loader\">\n                <DragArea dragProps={this.dragProps} inDragArea={this.state.inDragArea} handleFile={this.handleFile} />\n                <div className=\"error-group\">\n                    {this.state.errors.map(error => <ErrorNotification key={error.id} message={error.message} index={error.id} removeError={this.removeError} />)}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default FileLoader;","import React, { Component } from 'react'\n\nexport class DataEditor extends Component {\n    render() {\n        return (\n            <h2>Data Editor</h2>\n        )\n    }\n}\n\nexport default DataEditor\n","import React, { Component } from 'react'\n\nexport class FileSummary extends Component {\n    render() {\n        return (\n            <div className=\"section\">\n                <h2 className=\"success\">File uploaded successfully!</h2>\n                <div className=\"section-content\">\n                    Found <span style={{fontWeight: \"bold\"}}>{this.props.dataLength}</span> rows and <span style={{fontWeight: \"bold\"}}>{this.props.columnsLength}</span> columns in uploaded file. Columns for Polyline, start timestamp and end timestamp should be assigned automatically if they were found. You can modify it below if it was done incorrectly.\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default FileSummary\n","import React, { Component } from 'react'\n\nexport class ReuploadFile extends Component {\n    render() {\n        return (\n            <div className=\"section\">\n                <h2>Want to upload another file?</h2>\n                <div className=\"section-content\">\n                    Click button below to upload a new file. This will remove previously uploaded data.\n                    <button onClick={() => this.props.reinitialize()}>Reupload file</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ReuploadFile\n","import React, { Component } from 'react'\n\nexport class SectionOption extends Component {\n    render() {\n        return (\n            <>\n                {this.props.show && (<div className=\"section-option\">\n                    <label htmlFor={this.props.id}>{this.props.title}</label>\n                    <div className=\"select-wrapper\">\n                        <select id={this.props.id} name={this.props.id} value={this.props.value} onChange={this.props.onChange}>\n                            <option value={null}></option>\n                            {this.props.columns.map((column, index) => <option key={index} value={index}>{column}</option>)}\n                        </select>\n                    </div>\n                </div>)}\n            </>\n        )\n    }\n}\n\nexport default SectionOption\n","import React, { Component } from 'react'\nimport SectionOption from './SectionOption'\n\nexport class ColumnChooser extends Component {\n    handleChangeSectionOption = e => {\n        var value = parseInt(e.target.value);\n        if(isNaN(value)) value = null\n        this.props.handleChangeOptionValue(e.target.name, value);\n    }\n\n    render() {\n        return (\n            <div className=\"section\">\n                <h2>Choose columns</h2>\n                <div className=\"section-content\">\n                    <SectionOption id=\"polylineColumnId\" title=\"Polyline\" value={this.props.polylineColumnId} onChange={this.handleChangeSectionOption} columns={this.props.columns} show={true} />\n\n                    <div className=\"section-option\">\n                        <label htmlFor=\"includePathAnimation\">Include Path Animation?</label>\n                        <input type=\"checkbox\" id=\"includePathAnimation\" name=\"includePathAnimation\" checked={this.props.includePathAnimation} onChange={e => this.props.handleChangeOptionValue(e.target.name, e.target.checked)} />\n                        <div className=\"section-description\">\n                            Checking this checkbox will set if start and end date should be included in GeoJSON coordinates. Thank to this, animating path through time will be possible.\n                        </div>\n                    </div>\n\n                    <SectionOption id=\"startTimestampColumnId\" title=\"Start Timestamp\" value={this.props.startTimestampColumnId} onChange={this.handleChangeSectionOption} columns={this.props.columns} show={this.props.includePathAnimation} />\n                    <SectionOption id=\"endTimestampColumnId\" title=\"End Timestamp\" value={this.props.endTimestampColumnId} onChange={this.handleChangeSectionOption} columns={this.props.columns} show={this.props.includePathAnimation} />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ColumnChooser\n","import React, { Component } from 'react'\n\nexport class FileExport extends Component {\n    render() {\n        return (\n            <div className=\"section\">\n                <h2>Export File</h2>\n                <div className=\"section\">\n                    <div className=\"section-content\">\n                        Set filename and click generate to download GeoJSON file.\n                        <div className=\"section-option\">\n                            <label htmlFor=\"fileName\">Filename</label>\n                            <input id=\"fileName\" name=\"fileName\" type=\"text\" value={this.props.fileName} onChange={e => this.props.handleFileNameChange(e.target.value)} />\n                            <button className=\"inline\" onClick={this.props.generateGeoJSON}>Generate GeoJSON</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default FileExport\n","import React from 'react'\nimport loadingAnimation from '../images/loading-animation.svg'\n\nfunction Loading(props) {\n    return (\n        <div className=\"loading\">\n            <img src={loadingAnimation} alt=\"Loading animation\" />\n            Please wait\n        </div>\n    )\n}\n\nexport default Loading\n\n","import React from 'react';\nimport FileLoader from './components/FileLoader';\nimport DataEditor from './components/DataEditor';\nimport FileSummary from './components/FileSummary';\nimport ReuploadFile from './components/ReuploadFile';\nimport ColumnChooser from './components/ColumnChooser';\nimport FileExport from './components/FileExport';\nimport Loading from './components/Loading';\nimport worker from 'workerize-loader!./components/worker/FileDataWorker' // eslint-disable-line import/no-webpack-loader-syntax\n\nconst initialState = {\n  columns: [],\n  data: [],\n  polylineColumnId: null,\n  startTimestampColumnId: null,\n  endTimestampColumnId: null,\n  includePathAnimation: false,\n\n  isFileLoading: false,\n  isFileUploaded: false,\n  isGenerating: false,\n\n  fileName: 'decoded-data'\n}\n\nclass App extends React.Component {\n  state = initialState;\n\n  handleFileUpload = ({columns = [], data = [], polylineColumnId = null, startTimestampColumnId = null, endTimestampColumnId = null}) => {\n    this.setState({\n      columns,\n      data,\n      polylineColumnId,\n      startTimestampColumnId,\n      endTimestampColumnId,\n      isFileUploaded: true,\n      isFileLoading: false\n    })\n  }\n\n  handleChangeOptionValue = (property, value) => this.setState({ [property]: value})\n  handleIsFileLoading = value => this.setState({ isFileLoading: value })\n  handleIsGenerating = value => this.setState({ isGenerating: value })\n  handleFileNameChange = value => this.setState({ fileName: value })\n\n  generateGeoJSON = e => {\n      e.preventDefault();\n      this.handleIsGenerating(true);\n      var fileDataWorker = worker();\n\n      fileDataWorker.generateFeatureCollection(this.state.data, this.state.columns, this.state.polylineColumnId, this.state.startTimestampColumnId, this.state.endTimestampColumnId, this.state.includePathAnimation)\n          .then(result => {\n              this.saveData(result);\n              this.handleIsGenerating(false);\n          }).catch(error => {\n              console.log(error.message);\n              this.handleIsGenerating(false);\n          })\n  }\n\n  saveData = object => {\n      var json = JSON.stringify(object);\n      var blob = new Blob([json], {type: \"application/json\"});\n      var url  = URL.createObjectURL(blob);\n\n      var a = document.createElement(\"a\");\n      document.body.appendChild(a);\n      a.style = \"display: none\";\n      a.href = url;\n      if(!this.state.fileName) {\n          console.log(\"File name is empty\")\n          return;\n      }\n      a.download = `${this.state.fileName}.geojson`;\n      a.click();\n      window.URL.revokeObjectURL(url);\n      a.remove();\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"app-description\">\n            <h1>Polyline to GeoJSON Decoder</h1>\n            <p>Upload CSV file that contains Polyline values, which will be used to convert to GeoJSON coordinates. Optionally, your file can contain start timestamp and end timestamp for animating paths. Every available column will be converted into Feature properties.</p>\n        </div>\n        <div className=\"content\">\n          {(!this.state.isFileLoading && !this.state.isFileUploaded && !this.state.isGenerating) &&\n            <FileLoader\n              handleFileUpload={this.handleFileUpload}\n              handleIsFileLoading={this.handleIsFileLoading}\n            />}\n          {(!this.state.isFileLoading && this.state.isFileUploaded && !this.state.isGenerating) &&\n            <>\n              <FileSummary\n                columnsLength={this.state.columns.length}\n                dataLength={this.state.data.length}\n              />\n              <ColumnChooser\n                columns={this.state.columns}\n                polylineColumnId={this.state.polylineColumnId}\n                startTimestampColumnId={this.state.startTimestampColumnId}\n                endTimestampColumnId={this.state.endTimestampColumnId}\n                includePathAnimation={this.state.includePathAnimation}\n                handleChangeOptionValue={this.handleChangeOptionValue}\n              />\n              <FileExport\n                generateGeoJSON={this.generateGeoJSON}\n                fileName={this.state.fileName}\n                handleFileNameChange={this.handleFileNameChange}\n              />\n              <DataEditor />\n              <ReuploadFile reinitialize={() => this.setState(initialState)} />\n            </>\n          }\n          {(this.state.isGenerating || this.state.isFileLoading) && <Loading />}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","\n\t\t\t\tvar addMethods = require(\"../../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"parseFileData\",\"generateFeatureCollection\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"99b0d88542a99209d812.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t"],"sourceRoot":""}